// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct S_PlayerMoveState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static S_PlayerMoveState GetRootAsS_PlayerMoveState(ByteBuffer _bb) { return GetRootAsS_PlayerMoveState(_bb, new S_PlayerMoveState()); }
  public static S_PlayerMoveState GetRootAsS_PlayerMoveState(ByteBuffer _bb, S_PlayerMoveState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_PlayerMoveState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public CppMMO.Protocol.Vec2? CurrentPosition { get { int o = __p.__offset(6); return o != 0 ? (CppMMO.Protocol.Vec2?)(new CppMMO.Protocol.Vec2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public byte InputFlags { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public float MoveSpeed { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long ServerTimestamp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CommandId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CppMMO.Protocol.S_PlayerMoveState> CreateS_PlayerMoveState(FlatBufferBuilder builder,
      long player_id = 0,
      Offset<CppMMO.Protocol.Vec2> current_positionOffset = default(Offset<CppMMO.Protocol.Vec2>),
      byte input_flags = 0,
      float move_speed = 0.0f,
      long server_timestamp = 0,
      long command_id = 0) {
    builder.StartTable(6);
    S_PlayerMoveState.AddCommandId(builder, command_id);
    S_PlayerMoveState.AddServerTimestamp(builder, server_timestamp);
    S_PlayerMoveState.AddPlayerId(builder, player_id);
    S_PlayerMoveState.AddMoveSpeed(builder, move_speed);
    S_PlayerMoveState.AddCurrentPosition(builder, current_positionOffset);
    S_PlayerMoveState.AddInputFlags(builder, input_flags);
    return S_PlayerMoveState.EndS_PlayerMoveState(builder);
  }

  public static void StartS_PlayerMoveState(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPlayerId(FlatBufferBuilder builder, long playerId) { builder.AddLong(0, playerId, 0); }
  public static void AddCurrentPosition(FlatBufferBuilder builder, Offset<CppMMO.Protocol.Vec2> currentPositionOffset) { builder.AddOffset(1, currentPositionOffset.Value, 0); }
  public static void AddInputFlags(FlatBufferBuilder builder, byte inputFlags) { builder.AddByte(2, inputFlags, 0); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, float moveSpeed) { builder.AddFloat(3, moveSpeed, 0.0f); }
  public static void AddServerTimestamp(FlatBufferBuilder builder, long serverTimestamp) { builder.AddLong(4, serverTimestamp, 0); }
  public static void AddCommandId(FlatBufferBuilder builder, long commandId) { builder.AddLong(5, commandId, 0); }
  public static Offset<CppMMO.Protocol.S_PlayerMoveState> EndS_PlayerMoveState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.S_PlayerMoveState>(o);
  }
}


static public class S_PlayerMoveStateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTable(tablePos, 6 /*CurrentPosition*/, CppMMO.Protocol.Vec2Verify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*InputFlags*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*MoveSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ServerTimestamp*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*CommandId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
