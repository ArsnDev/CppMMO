namespace CppMMO.Protocol;

// Vector for 2D position
struct Vec2 {
  x:float;
  y:float;
}

// Information about a player
table PlayerInfo {
  player_id:long;
  name:string;
  position:Vec2;
  hp:int;
  max_hp:int;
}

// Enum for all packet types
enum PacketId : ushort {
  NONE = 0,
  // Login
  C_Login = 1,
  S_Login = 2,
  // Chat
  C_Chat = 3,
  S_Chat = 4,
  // Player Movement (2D game)
  C_Move = 5,
  S_PlayerMove = 6,
  // Zone System
  C_ChangeZone = 7,
  S_EnterZone = 8,
  S_LeaveZone = 9,
  S_PlayerEnterZone = 10,
  S_PlayerLeaveZone = 11,
  // Player Stats Update
  S_PlayerHpUpdate = 12,
}

// --- Packet Body Definitions ---

// C_Login: Client requests to login
table C_Login {
  id:string;
  command_id:long;
}

// S_Login: Server responds to login request
table S_Login {
  success:bool;
  player_info:PlayerInfo;
  command_id:long;
}

// C_Chat: Client sends a chat message
table C_Chat {
  message:string;
  command_id:long;
}

// S_Chat: Server broadcasts a chat message
table S_Chat {
  player_id:long;
  message:string;
  command_id:long;
}

// C_Move: Client requests to move
table C_Move {
  target_position:Vec2;
  command_id:long;
}

// S_PlayerMove: Server notifies clients about another player's movement
table S_PlayerMove {
  player_id:long;
  target_position:Vec2;
  command_id:long;
}

// S_PlayerHpUpdate: Server notifies clients about a player's HP change
table S_PlayerHpUpdate {
  player_id:long;
  current_hp:int;
}

// C_ChangeZone: Client requests to move to a different zone
table C_ChangeZone {
  target_zone_id:int;
  command_id:long;
}

// S_EnterZone: Server confirms zone entry and provides initial state
table S_EnterZone {
  zone_id:int;
  my_player:PlayerInfo;
  other_players:[PlayerInfo];
  player_id:long;
}

// S_LeaveZone: Server confirms the player has left the zone
table S_LeaveZone {
}

// S_PlayerEnterZone: Server notifies clients that a new player entered their zone
table S_PlayerEnterZone {
  player_info:PlayerInfo;
}

// S_PlayerLeaveZone: Server notifies clients that a player left their zone
table S_PlayerLeaveZone {
  player_id:long;
}

// Union to hold any possible packet data
union Packet {
  C_Login,
  S_Login,
  C_Chat,
  S_Chat,
  C_Move,
  S_PlayerMove,
  S_PlayerHpUpdate,
  C_ChangeZone,
  S_EnterZone,
  S_LeaveZone,
  S_PlayerEnterZone,
  S_PlayerLeaveZone,
}

// Root table for all packets
table UnifiedPacket {
  id:PacketId;
  data:Packet;
}

root_type UnifiedPacket;