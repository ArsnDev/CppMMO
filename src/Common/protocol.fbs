namespace CppMMO.Protocol;

// Vector for 3D position (2D는 z=0 사용)
table Vec3 {
  x:float;
  y:float;
  z:float;
}

// Game tick information for server authority
table GameTick {
  tick_number:ulong;
  server_time:ulong;
}

// Player information
table PlayerInfo {
  player_id:ulong;
  name:string;
  position:Vec3;
  hp:int;
  max_hp:int;
  mp:int;
  max_mp:int;
}

// Player state for server authority simulation
table PlayerState {
  player_id:ulong;
  position:Vec3;
  velocity:Vec3;
  rotation:float;
  hp:int;
  mp:int;
  animation_state:ubyte;
  last_input_sequence:uint;
}

// Game event types (플레이어간 상호작용)
enum EventType : ubyte {
  NONE = 0,
  PLAYER_DAMAGE = 1,
  PLAYER_HEAL = 2,
  PLAYER_DEATH = 3,
  PLAYER_RESPAWN = 4,
}

// Game events for player interactions
table GameEvent {
  event_type:EventType;
  source_player_id:ulong;
  target_player_id:ulong;
  position:Vec3;
  value:int;  // damage, heal amount, etc.
}

// Enum for all packet types
enum PacketId : ushort {
  NONE = 0,
  
  // === Authentication & Chat (기존 유지) ===
  C_Login = 1,
  S_LoginSuccess = 2,
  S_LoginFailure = 3,
  C_Chat = 4,
  S_Chat = 5,
  
  // === Server Authority Game Packets ===
  // Player Input
  C_PlayerInput = 10,
  
  // World State Updates
  S_WorldSnapshot = 11,
  S_StateCorrection = 12,
  S_GameTick = 13,
  
  // Zone System
  C_EnterZone = 20,
  S_ZoneEntered = 21,
  S_PlayerJoined = 22,
  S_PlayerLeft = 23,
}

// === Packet Definitions ===

// === 기존 Authentication & Chat 패킷들 (유지) ===

// C_Login: Client requests to login
table C_Login {
  session_ticket:string;
  command_id:long;
}

// S_LoginSuccess: Server responds to successful login request
table S_LoginSuccess {
  player_info:PlayerInfo;
  command_id:long;
}

// S_LoginFailure: Server responds to failed login request
table S_LoginFailure {
  error_code:int;
  error_message:string;
  command_id:long;
}

// C_Chat: Client sends a chat message
table C_Chat {
  message:string;
  command_id:long;
}

// S_Chat: Server broadcasts a chat message
table S_Chat {
  player_id:long;
  message:string;
  command_id:long;
}

// === 새로운 Server Authority 패킷들 ===

// C_PlayerInput: Client sends input to server
table C_PlayerInput {
  tick_number:ulong;
  client_time:ulong;
  input_flags:ubyte;        // WASD 비트 플래그 (1=W, 2=S, 4=A, 8=D)
  mouse_position:Vec3;      // 마우스 위치 (스킬 방향용)
  sequence_number:uint;     // 입력 순서 보장
  command_id:long;
}

// S_WorldSnapshot: Server sends authoritative world state
table S_WorldSnapshot {
  tick_number:ulong;
  server_time:ulong;
  player_states:[PlayerState];  // 시야 내 플레이어들
  events:[GameEvent];           // 이번 틱의 이벤트들
}

// S_StateCorrection: Server corrects client prediction
table S_StateCorrection {
  tick_number:ulong;
  corrected_position:Vec3;
  corrected_velocity:Vec3;
  sequence_number:uint;     // 이 시점의 입력 시퀀스
}

// S_GameTick: Server sends tick information
table S_GameTick {
  tick_info:GameTick;
}

// C_EnterZone: Client requests to enter a zone
table C_EnterZone {
  zone_id:int;
  command_id:long;
}

// S_ZoneEntered: Server confirms zone entry
table S_ZoneEntered {
  zone_id:int;
  my_player:PlayerInfo;
  other_players:[PlayerInfo];
}

// S_PlayerJoined: Notify other players of new player
table S_PlayerJoined {
  player_info:PlayerInfo;
}

// S_PlayerLeft: Notify other players of player leaving
table S_PlayerLeft {
  player_id:ulong;
}

// Union to hold any possible packet data
union Packet {
  // Authentication & Chat
  C_Login,
  S_LoginSuccess,
  S_LoginFailure,
  C_Chat,
  S_Chat,
  
  // Server Authority Game
  C_PlayerInput,
  S_WorldSnapshot,
  S_StateCorrection,
  S_GameTick,
  
  // Zone System
  C_EnterZone,
  S_ZoneEntered,
  S_PlayerJoined,
  S_PlayerLeft,
}

// Root table for all packets
table UnifiedPacket {
  id:PacketId;
  data:Packet;
}

root_type UnifiedPacket;