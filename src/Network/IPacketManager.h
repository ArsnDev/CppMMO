#pragma once
#include "pch.h"
#include "protocol_generated.h"

namespace CppMMO
{
    namespace Network
    {
        class ISession;
        
        // Uses the PacketId enum generated by FlatBuffers as packet identifier.
        using PacketId = Protocol::PacketId;
        /**
         *  @brief Defines the type of packet handler functions.
         *  @param std::shared_ptr<ISession> Pointer to the session that received the packet.
         *  @param const Protocol::UnifiedPacket* FlatBuffers type containing the actual packet data.
         */
        using PacketHandler = std::function<void(std::shared_ptr<ISession>, const Protocol::UnifiedPacket*)>;

        class IPacketManager
        {
        public:
            IPacketManager() = default;
            virtual ~IPacketManager() = default;

            IPacketManager(const IPacketManager&) = delete;
            IPacketManager& operator=(const IPacketManager&) = delete;
            
            /**
             *  @brief Registers a handler function for a specific packet ID.
             *  @param id The ID of the packet to handle.
             *  @param handler The function to call when a packet with this ID is received.
             */
            virtual void RegisterHandler(PacketId id, const PacketHandler& handler) = 0;
            /**
             *  @brief Removes a registered handler.
             *  @param id The packet ID whose handler should be removed.
             */
            virtual void UnregisterHandler(PacketId id) = 0;
            /**
             *  @brief Analyzes received packets and forwards them to registered handlers.
             *  @param session The session that received the packet.
             *  @param packet The top-level packet object parsed through FlatBuffers.
             */
            virtual void HandlePacket(const std::shared_ptr<ISession>& session, const std::vector<std::byte>& packet) = 0;
        
            virtual void DispatchPacket(Protocol::PacketId id, const std::shared_ptr<ISession>& session, const Protocol::UnifiedPacket* packet) = 0;
        };
    }
}