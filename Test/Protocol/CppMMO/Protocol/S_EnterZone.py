# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class S_EnterZone(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = S_EnterZone()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsS_EnterZone(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # S_EnterZone
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # S_EnterZone
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # S_EnterZone
    def MyPlayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from CppMMO.Protocol.PlayerInfo import PlayerInfo
            obj = PlayerInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # S_EnterZone
    def OtherPlayers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CppMMO.Protocol.PlayerInfo import PlayerInfo
            obj = PlayerInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # S_EnterZone
    def OtherPlayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # S_EnterZone
    def OtherPlayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # S_EnterZone
    def PlayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def S_EnterZoneStart(builder):
    builder.StartObject(4)

def Start(builder):
    S_EnterZoneStart(builder)

def S_EnterZoneAddZoneId(builder, zoneId):
    builder.PrependInt32Slot(0, zoneId, 0)

def AddZoneId(builder, zoneId):
    S_EnterZoneAddZoneId(builder, zoneId)

def S_EnterZoneAddMyPlayer(builder, myPlayer):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(myPlayer), 0)

def AddMyPlayer(builder, myPlayer):
    S_EnterZoneAddMyPlayer(builder, myPlayer)

def S_EnterZoneAddOtherPlayers(builder, otherPlayers):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(otherPlayers), 0)

def AddOtherPlayers(builder, otherPlayers):
    S_EnterZoneAddOtherPlayers(builder, otherPlayers)

def S_EnterZoneStartOtherPlayersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOtherPlayersVector(builder, numElems):
    return S_EnterZoneStartOtherPlayersVector(builder, numElems)

def S_EnterZoneAddPlayerId(builder, playerId):
    builder.PrependInt64Slot(3, playerId, 0)

def AddPlayerId(builder, playerId):
    S_EnterZoneAddPlayerId(builder, playerId)

def S_EnterZoneEnd(builder):
    return builder.EndObject()

def End(builder):
    return S_EnterZoneEnd(builder)
