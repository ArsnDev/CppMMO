# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class C_Login(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = C_Login()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsC_Login(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # C_Login
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # C_Login
    def SessionTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # C_Login
    def CommandId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def C_LoginStart(builder):
    builder.StartObject(2)

def Start(builder):
    C_LoginStart(builder)

def C_LoginAddSessionTicket(builder, sessionTicket):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sessionTicket), 0)

def AddSessionTicket(builder, sessionTicket):
    C_LoginAddSessionTicket(builder, sessionTicket)

def C_LoginAddCommandId(builder, commandId):
    builder.PrependInt64Slot(1, commandId, 0)

def AddCommandId(builder, commandId):
    C_LoginAddCommandId(builder, commandId)

def C_LoginEnd(builder):
    return builder.EndObject()

def End(builder):
    return C_LoginEnd(builder)
