// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct C_Move : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static C_Move GetRootAsC_Move(ByteBuffer _bb) { return GetRootAsC_Move(_bb, new C_Move()); }
  public static C_Move GetRootAsC_Move(ByteBuffer _bb, C_Move obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public C_Move __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CppMMO.Protocol.Vec2? TargetPosition { get { int o = __p.__offset(4); return o != 0 ? (CppMMO.Protocol.Vec2?)(new CppMMO.Protocol.Vec2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public long CommandId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static void StartC_Move(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTargetPosition(FlatBufferBuilder builder, Offset<CppMMO.Protocol.Vec2> targetPositionOffset) { builder.AddStruct(0, targetPositionOffset.Value, 0); }
  public static void AddCommandId(FlatBufferBuilder builder, long commandId) { builder.AddLong(1, commandId, 0); }
  public static Offset<CppMMO.Protocol.C_Move> EndC_Move(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.C_Move>(o);
  }
}


static public class C_MoveVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TargetPosition*/, 8 /*CppMMO.Protocol.Vec2*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*CommandId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
