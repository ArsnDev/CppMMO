# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class S_StateCorrection(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = S_StateCorrection()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsS_StateCorrection(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # S_StateCorrection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # S_StateCorrection
    def TickNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # S_StateCorrection
    def CorrectedPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # S_StateCorrection
    def CorrectedVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # S_StateCorrection
    def SequenceNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def S_StateCorrectionStart(builder):
    builder.StartObject(4)

def Start(builder):
    S_StateCorrectionStart(builder)

def S_StateCorrectionAddTickNumber(builder, tickNumber):
    builder.PrependUint64Slot(0, tickNumber, 0)

def AddTickNumber(builder, tickNumber):
    S_StateCorrectionAddTickNumber(builder, tickNumber)

def S_StateCorrectionAddCorrectedPosition(builder, correctedPosition):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(correctedPosition), 0)

def AddCorrectedPosition(builder, correctedPosition):
    S_StateCorrectionAddCorrectedPosition(builder, correctedPosition)

def S_StateCorrectionAddCorrectedVelocity(builder, correctedVelocity):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(correctedVelocity), 0)

def AddCorrectedVelocity(builder, correctedVelocity):
    S_StateCorrectionAddCorrectedVelocity(builder, correctedVelocity)

def S_StateCorrectionAddSequenceNumber(builder, sequenceNumber):
    builder.PrependUint32Slot(3, sequenceNumber, 0)

def AddSequenceNumber(builder, sequenceNumber):
    S_StateCorrectionAddSequenceNumber(builder, sequenceNumber)

def S_StateCorrectionEnd(builder):
    return builder.EndObject()

def End(builder):
    return S_StateCorrectionEnd(builder)
