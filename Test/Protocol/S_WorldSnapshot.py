# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class S_WorldSnapshot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = S_WorldSnapshot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsS_WorldSnapshot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # S_WorldSnapshot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # S_WorldSnapshot
    def TickNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # S_WorldSnapshot
    def ServerTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # S_WorldSnapshot
    def PlayerStates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CppMMO.Protocol.PlayerState import PlayerState
            obj = PlayerState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # S_WorldSnapshot
    def PlayerStatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # S_WorldSnapshot
    def PlayerStatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # S_WorldSnapshot
    def Events(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CppMMO.Protocol.GameEvent import GameEvent
            obj = GameEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # S_WorldSnapshot
    def EventsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # S_WorldSnapshot
    def EventsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def S_WorldSnapshotStart(builder):
    builder.StartObject(4)

def Start(builder):
    S_WorldSnapshotStart(builder)

def S_WorldSnapshotAddTickNumber(builder, tickNumber):
    builder.PrependUint64Slot(0, tickNumber, 0)

def AddTickNumber(builder, tickNumber):
    S_WorldSnapshotAddTickNumber(builder, tickNumber)

def S_WorldSnapshotAddServerTime(builder, serverTime):
    builder.PrependUint64Slot(1, serverTime, 0)

def AddServerTime(builder, serverTime):
    S_WorldSnapshotAddServerTime(builder, serverTime)

def S_WorldSnapshotAddPlayerStates(builder, playerStates):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(playerStates), 0)

def AddPlayerStates(builder, playerStates):
    S_WorldSnapshotAddPlayerStates(builder, playerStates)

def S_WorldSnapshotStartPlayerStatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPlayerStatesVector(builder, numElems):
    return S_WorldSnapshotStartPlayerStatesVector(builder, numElems)

def S_WorldSnapshotAddEvents(builder, events):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(events), 0)

def AddEvents(builder, events):
    S_WorldSnapshotAddEvents(builder, events)

def S_WorldSnapshotStartEventsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEventsVector(builder, numElems):
    return S_WorldSnapshotStartEventsVector(builder, numElems)

def S_WorldSnapshotEnd(builder):
    return builder.EndObject()

def End(builder):
    return S_WorldSnapshotEnd(builder)
