# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GameEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GameEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGameEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GameEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GameEvent
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # GameEvent
    def SourcePlayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # GameEvent
    def TargetPlayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # GameEvent
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameEvent
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def GameEventStart(builder):
    builder.StartObject(5)

def Start(builder):
    GameEventStart(builder)

def GameEventAddEventType(builder, eventType):
    builder.PrependUint8Slot(0, eventType, 0)

def AddEventType(builder, eventType):
    GameEventAddEventType(builder, eventType)

def GameEventAddSourcePlayerId(builder, sourcePlayerId):
    builder.PrependUint64Slot(1, sourcePlayerId, 0)

def AddSourcePlayerId(builder, sourcePlayerId):
    GameEventAddSourcePlayerId(builder, sourcePlayerId)

def GameEventAddTargetPlayerId(builder, targetPlayerId):
    builder.PrependUint64Slot(2, targetPlayerId, 0)

def AddTargetPlayerId(builder, targetPlayerId):
    GameEventAddTargetPlayerId(builder, targetPlayerId)

def GameEventAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    GameEventAddPosition(builder, position)

def GameEventAddValue(builder, value):
    builder.PrependInt32Slot(4, value, 0)

def AddValue(builder, value):
    GameEventAddValue(builder, value)

def GameEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return GameEventEnd(builder)
